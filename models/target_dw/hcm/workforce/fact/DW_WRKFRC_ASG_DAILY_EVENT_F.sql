 SELECT  DATES.ASSIGNMENT_ID AS ASSIGNMENT_ID              , 
  DATES.EVENT_DATE AS EVENT_DATE                 , 
  TO_CHAR(DATES.ASSIGNMENT_ID) ||'~'|| TO_CHAR(DATES.EVENT_DATE,'YYYYMMDD') AS SOURCE_RECORD_ID           , 
  ASG.DEPARTMENT_ID AS DEPARTMENT_ID              , 
  ASG.REPORTING_ESTABLISHMENT_ID AS REPORTING_ESTABLISHMENT_ID , 
  ASG.JOB_ID AS JOB_ID                     , 
  JOB.JOB_FAMILY_ID AS JOB_FAMILY_ID			   , 
  ASG.LOCATION_ID AS LOCATION_ID                , 
  ASG.POSITION_ID AS POSITION_ID                , 
  ASG.GRADE_ID AS GRADE_ID                   , 
  COALESCE(RATE_VAL.RATE_VALUE_ID,-99999) AS RATE_VALUE_ID              , 
  COALESCE(RATE.RATE_ID,-99999) AS RATE_ID                    , 
  COALESCE(BASIS.SALARY_BASIS_ID,-99999) AS SALARY_BASIS_ID            , 
  ASG.LEGAL_EMPLOYER_ID AS LEGAL_EMPLOYER_ID          , 
  ASG.BUSINESS_UNIT_ID AS BUSINESS_UNIT_ID           , 
  ASG.PERIOD_OF_SERVICE_ID AS PERIOD_OF_SERVICE_ID       , 
  ASG.PERSON_ID AS PERSON_ID                  , 
  ASG.PERSON_TYPE_ID AS PERSON_TYPE_ID             , 
  ASG.ASSIGNMENT_STATUS_TYPE_ID AS ASSIGNMENT_STATUS_TYPE_ID  , 
  COALESCE(PERF.RATING_LEVEL_ID,-99999) AS PERFORMANCE_RATING_LEVEL_ID , 
  COALESCE(POT.RATING_LEVEL_ID,-99999) AS POTENTIAL_RATING_LEVEL_ID   , 
  COALESCE(SUP.MANAGER_ASSIGNMENT_ID,-99999) AS MANAGER_ASSIGNMENT_ID      , 
  COALESCE(SUP.MANAGER_ID,-99999) AS MANAGER_ID                 , 
  ASG.ASSIGNMENT_NUMBER AS ASSIGNMENT_NUMBER          , 
  ASG.ASSIGNMENT_NAME AS ASSIGNMENT_NAME            , 
  ASG.WORKER_TYPE AS WORKER_TYPE                , 
  ASG.WORKER_CATEGORY AS WORKER_CATEGORY            , 
  ASG.ASSIGNMENT_CATEGORY AS ASSIGNMENT_CATEGORY        , 
  ASG.LEGISLATION_CODE AS LEGISLATION_CODE           , 
  COALESCE(LOC.COUNTRY,'~NOVALUE~') AS COUNTRY                    , 
  PER_LEG.SEX AS SEX                        , 
  PER_LEG.MARITAL_STATUS AS MARITAL_STATUS             , 
  PER_LEG.HIGHEST_EDUCATION_LEVEL AS HIGHEST_EDUCATION_LEVEL    , 
  PER_LEG.ETHNICITY AS ETHNICITY                  , 
  PER_LEG.RELIGION AS RELIGION                   , 
  PER_LEG.DISABILITY_FLAG AS DISABILITY_FLAG            , 
  ASG.PRIMARY_FLAG AS PRIMARY_FLAG               , 
  ASG.PRIMARY_ASSIGNMENT_FLAG AS PRIMARY_ASSIGNMENT_FLAG    , 
  ASG.SYSTEM_PERSON_TYPE AS SYSTEM_PERSON_TYPE         , 
  ASG.PAY_SYSTEM_STATUS AS PAY_SYSTEM_STATUS          , 
  ASG.PER_SYSTEM_STATUS AS PER_SYSTEM_STATUS          , 
  PER_LEG.DATE_OF_BIRTH AS DATE_OF_BIRTH              , 
  SP.DATE_START AS DATE_START                 , 
  CASE WHEN DATES.EVENT_DATE >= SP.ACTUAL_TERMINATION_DATE THEN SP.ACTUAL_TERMINATION_DATE ELSE NULL END AS ACTUAL_TERMINATION_DATE    , 
  CASE WHEN MGR_STAT.MANAGER_FLAG = 'Y' THEN 1 ELSE 0 END AS MANAGER_IND                , 
  TRUNC(MONTHS_BETWEEN(DATES.EVENT_DATE , PER_LEG.DATE_OF_BIRTH) / 12) AS AGE_IN_YEARS               , 
  TRUNC(MONTHS_BETWEEN(DATES.EVENT_DATE , PER_LEG.DATE_OF_BIRTH)) AS AGE_IN_MONTHS              , 
  CASE WHEN SP.ACTUAL_TERMINATION_DATE IS NOT NULL AND SP.ACTUAL_TERMINATION_DATE <= DATES.EVENT_DATE  THEN TRUNC(MONTHS_BETWEEN(SP.ACTUAL_TERMINATION_DATE , SP.DATE_START)/12)   ELSE TRUNC(MONTHS_BETWEEN(DATES.EVENT_DATE , SP.DATE_START)/12)   END AS TENURE_IN_YEARS            , 
  CASE WHEN SP.ACTUAL_TERMINATION_DATE IS NOT NULL AND SP.ACTUAL_TERMINATION_DATE <= DATES.EVENT_DATE  THEN TRUNC(MONTHS_BETWEEN(SP.ACTUAL_TERMINATION_DATE , SP.DATE_START))   ELSE TRUNC(MONTHS_BETWEEN(DATES.EVENT_DATE , SP.DATE_START))   END AS TENURE_IN_MONTHS           , 
  CASE WHEN EVT_HELP.PROMOTION_EVENT_IND=1 THEN (DATES.EVENT_DATE - EVT_HELP.PROMOTION_DATE) ELSE NULL END AS DAYS_SINCE_LATEST_PROMOTION , 
   CASE WHEN (RATE.ANNUALIZATION_FACTOR * RATE_VAL.MID_VALUE)>0 THEN ROUND(((BASIS.SALARY_ANNUALIZATION_FACTOR *  SAL.SALARY_AMOUNT)/(RATE.ANNUALIZATION_FACTOR * RATE_VAL.MID_VALUE)),2) ELSE NULL END AS COMPUTED_COMPA_RATIO       , 
  NULL AS ANNUALIZED_SALARY          , 
  BASIS.SALARY_ANNUALIZATION_FACTOR * SAL.SALARY_AMOUNT AS COMPUTED_ANNUALIZED_SALARY , 
  SAL.CURRENCY_CODE AS CURRENCY_CODE              , 
  HDC.HEADCOUNT AS HEADCOUNT                  , 
  FTE.FTE AS FTE                        , 
  COALESCE(EVT_TMP.HIRE_EVENT_IND,0) AS HIRE_EVENT_IND             , 
  COALESCE(EVT_TMP.REHIRE_EVENT_IND,0) AS REHIRE_EVENT_IND           , 
  COALESCE(EVT_TMP.PROMOTION_EVENT_IND,0) AS PROMOTION_EVENT_IND        , 
  COALESCE(EVT_TMP.TRANSFER_EVENT_IND,0) AS TRANSFER_EVENT_IND         , 
  COALESCE(EVT_TMP.TERM_EVENT_IND,0) AS TERM_EVENT_IND             , 
  COALESCE(EVT_TMP.VOL_TERM_EVENT_IND,0) AS VOL_TERM_EVENT_IND         , 
  COALESCE(EVT_TMP.INVOL_TERM_EVENT_IND,0) AS INVOL_TERM_EVENT_IND       , 
  0 AS ASG_CATEGORY_CHANGE_IND    , 
  CASE WHEN ASG.PER_SYSTEM_STATUS = 'INACTIVE' AND TRUNC(SP.ACTUAL_TERMINATION_DATE+1) = TRUNC(DATES.EVENT_DATE) THEN 1 ELSE 0 END AS PER_SYSTEM_STATUS_CHANGE_IND , 
  0 AS ASG_STATUS_TYPE_CHANGE_IND , 
  0 AS JOB_CHANGE_IND             , 
  0 AS GRADE_CHANGE_IND           , 
  0 AS LOCATION_CHANGE_IND        , 
  0 AS POSITION_CHANGE_IND        , 
  0 AS DEPARTMENT_CHANGE_IND      , 
  0 AS HEADCOUNT_CHANGE_IND       , 
  0 AS FTE_CHANGE_IND             , 
  0 AS MANAGER_CHANGE_IND         , 
  0 AS SALARY_CHANGE_IND          , 
  COALESCE(ASG.FULL_PART_TIME_FLAG,'~NOVALUE~') AS FULL_PART_TIME_FLAG , 
  ASG.PERMANENT_TEMPORARY_FLAG AS PERMANENT_TEMPORARY_FLAG 
 FROM  {{ ref('DW_WRKFRC_ASG_DATES_STAGE') }} DATES LEFT OUTER JOIN {{ ref('DW_WRKFRC_ASG_EVENT_STAGE') }} EVT_TMP  ON ( DATES.ASSIGNMENT_ID = EVT_TMP.ASSIGNMENT_ID AND DATES.EVENT_DATE = EVT_TMP.EVENT_DATE ) INNER JOIN   {{ ref('DW_WRKFRC_ASG_F') }} ASG  ON ( DATES.ASSIGNMENT_ID = ASG.ASSIGNMENT_ID AND DATES.EVENT_DATE BETWEEN ASG.EFFECTIVE_START_DATE AND ASG.EFFECTIVE_END_DATE  AND ASG.EFFECTIVE_LATEST_CHANGE = 'Y' ) LEFT OUTER JOIN  {{ ref('DW_WRKFRC_ASG_HEADCOUNT_F') }} HDC  ON ( DATES.ASSIGNMENT_ID = HDC.ASSIGNMENT_ID AND DATES.EVENT_DATE BETWEEN HDC.EFFECTIVE_START_DATE AND HDC.EFFECTIVE_END_DATE ) LEFT OUTER JOIN  {{ ref('DW_WRKFRC_ASG_FTE_F') }} FTE  ON ( DATES.ASSIGNMENT_ID = FTE.ASSIGNMENT_ID AND DATES.EVENT_DATE BETWEEN FTE.EFFECTIVE_START_DATE AND FTE.EFFECTIVE_END_DATE ) LEFT OUTER JOIN  {{ ref('DW_WRKFRC_ASG_SUPERVISOR_F') }} SUP  ON ( DATES.ASSIGNMENT_ID = SUP.ASSIGNMENT_ID AND DATES.EVENT_DATE BETWEEN SUP.EFFECTIVE_START_DATE AND SUP.EFFECTIVE_END_DATE ) LEFT OUTER JOIN  {{ ref('DW_CMP_ASG_SALARY_F') }} SAL  ON ( DATES.ASSIGNMENT_ID = SAL.ASSIGNMENT_ID AND DATES.EVENT_DATE BETWEEN SAL.EFFECTIVE_START_DATE AND SAL.EFFECTIVE_END_DATE ) LEFT OUTER JOIN  {{ ref('DW_SERVICE_PERIOD_D') }} SP  ON ( ASG.PERIOD_OF_SERVICE_ID = SP.PERIOD_OF_SERVICE_ID AND ASG.LEGISLATION_CODE = SP.LEGISLATION_CODE ) INNER JOIN  {{ ref('DW_JOB_D') }} JOB  ON (ASG.JOB_ID = JOB.JOB_ID AND DATES.EVENT_DATE >= JOB.EFFECTIVE_START_DATE AND DATES.EVENT_DATE <= JOB.EFFECTIVE_END_DATE) LEFT OUTER JOIN  {{ ref('DW_SALARY_BASIS_D') }} BASIS  ON ( SAL.SALARY_BASIS_ID = BASIS.SALARY_BASIS_ID ) LEFT OUTER JOIN  {{ ref('DW_GRADE_RATE_VALUE_D') }} RATE_VAL  ON ( BASIS.GRADE_RATE_ID = RATE_VAL.RATE_ID AND ASG.GRADE_ID = RATE_VAL.RATE_OBJECT_ID AND RATE_VAL.RATE_OBJECT_TYPE = 'GRADE' AND DATES.EVENT_DATE >= RATE_VAL.EFFECTIVE_START_DATE AND DATES.EVENT_DATE <= RATE_VAL.EFFECTIVE_END_DATE ) LEFT OUTER JOIN  {{ ref('DW_GRADE_RATE_D') }} RATE  ON ( RATE_VAL.RATE_ID = RATE.RATE_ID AND DATES.EVENT_DATE >= RATE.EFFECTIVE_START_DATE AND DATES.EVENT_DATE <= RATE.EFFECTIVE_END_DATE ) INNER JOIN  {{ ref('DW_PERSON_LEGISLATION_ALL_D') }} PER_LEG  ON ( ASG.PERSON_ID = PER_LEG.PERSON_ID AND ASG.LEGISLATION_CODE = PER_LEG.LEGISLATION_CODE AND DATES.EVENT_DATE >= PER_LEG.DATE_FROM AND DATES.EVENT_DATE <= PER_LEG.DATE_TO ) LEFT OUTER JOIN  {{ ref('DW_WORKER_LOCATION_D') }} LOC  ON ( ASG.LOCATION_ID = LOC.LOCATION_ID ) LEFT OUTER JOIN  {{ ref('DW_WRKFRC_ASG_EVENT_H') }} EVT_HELP  ON ( ASG.ASSIGNMENT_ID = EVT_HELP.ASSIGNMENT_ID AND DATES.EVENT_DATE > EVT_HELP.PROMOTION_DATE AND DATES.EVENT_DATE <= EVT_HELP.NEXT_PROMOTION_DATE ) LEFT OUTER JOIN  {{ ref('DW_ASG_MANAGER_STATUS_D') }} MGR_STAT  ON (ASG.ASSIGNMENT_ID = MGR_STAT.MANAGER_ASSIGNMENT_ID AND DATES.EVENT_DATE >= MGR_STAT.DATE_FROM AND DATES.EVENT_DATE <=MGR_STAT.DATE_TO  AND MGR_STAT.MANAGER_TYPE = 'LINE_MANAGER' AND MGR_STAT.MANAGER_FLAG = 'Y' AND MGR_STAT.PRIMARY_FLAG = 'Y' ) LEFT OUTER JOIN   {{ ref('DW_PERSON_PERFORMANCE_F') }} PERF  ON (ASG.PERSON_ID = PERF.PERSON_ID AND DATES.EVENT_DATE BETWEEN PERF.DATE_FROM AND PERF.DATE_TO ) LEFT OUTER JOIN   {{ ref('DW_PERSON_POTENTIAL_F') }} POT  ON (ASG.PERSON_ID = POT.PERSON_ID AND DATES.EVENT_DATE BETWEEN POT.DATE_FROM AND POT.DATE_TO)  

